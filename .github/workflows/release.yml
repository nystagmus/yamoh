name: Release

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
      - '[0-9]+.[0-9]+.[0-9]+-*'

jobs:
  build-test-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Install Dependencies
        run: sudo buildutil/install.dependencies.sh

      - name: Setup .NET
        uses: actions/setup-dotnet@v5.0.0
        with:
          global-json-file: global.json

      - name: Restore dependencies
        run: dotnet restore src

      - name: Build
        run: dotnet build src --no-restore --configuration Release

      - name: Test
        run: dotnet test src --no-build --configuration Release --verbosity normal

      - name: Install MinVer
        run: dotnet tool install --global minver-cli

      - name: Determine versions
        id: minver
        shell: pwsh
        run: |
          # Read settings from Custom.Build.props
          [xml]$xml = Get-Content ./src/Custom.Build.props
          $minMajorMinor = $xml.selectNodes('/Project/PropertyGroup/MinVerMinimumMajorMinor').InnerText
          $autoIncrement = $xml.selectNodes('/Project/PropertyGroup/MinVerAutoIncrement').InnerText
          echo "MinVerMinimumMajorMinor=$minMajorMinor, MinVerAutoIncrement=$autoIncrement"
          if (-not ($minMajorMinor -and $autoIncrement)) {
            throw "Missing MinVer settings in Custom.Build.props"
          }

          # Execute MinVer
          echo "MinVerVersion=$(minver --minimum-major-minor $minMajorMinor --auto-increment $autoIncrement)" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append

      - name: Build Docker Image
        run: docker build -f src/Dockerfile -t ${{ secrets.DOCKERHUB_USERNAME }}/yamoh:${{ github.ref_name }} .

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Publish Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/yamoh:${{ github.ref_name }}

      - name: Tag Docker Image as latest
        run: docker tag ${{ secrets.DOCKERHUB_USERNAME }}/yamoh:${{ github.ref_name }} ${{ secrets.DOCKERHUB_USERNAME }}/yamoh:latest

      - name: Push Docker Image (latest)
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/yamoh:latest

      - name: Publish Standalone Releases
        run: |
          dotnet publish src/Yamoh/Yamoh.csproj -c Release -r win-x64 --self-contained true -o release/win-x64
          dotnet publish src/Yamoh/Yamoh.csproj -c Release -r linux-x64 --self-contained true -o release/linux-x64
          dotnet publish src/Yamoh/Yamoh.csproj -c Release -r osx-x64 --self-contained true -o release/osx-x64
          cd release/win-x64 && zip -r ../yamoh-win-x64-${{ github.ref_name }}.zip . && cd ../..
          cd release/linux-x64 && zip -r ../yamoh-linux-x64-${{ github.ref_name }}.zip . && cd ../..
          cd release/osx-x64 && zip -r ../yamoh-osx-x64-${{ github.ref_name }}.zip . && cd ../..

      - name: Create Draft Release and Upload Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GH_REPO: ${{ github.repository }}
        run: |
          gh release create ${{ github.ref_name }} \
            --draft \
            --title "Yamoh ${{ github.ref_name }}" \
            release/yamoh-win-x64-${{ github.ref_name }}.zip \
            release/yamoh-linux-x64-${{ github.ref_name }}.zip \
            release/yamoh-osx-x64-${{ github.ref_name }}.zip
